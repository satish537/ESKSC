  import requests
from requests.auth import HTTPBasicAuth
import pandas as pd
import json
import urllib3
import os
from datetime import datetime
import logging
from typing import Tuple, Optional
from pathlib import Path

# ... (previous code remains the same until generate_table method) ...

    def generate_table_and_chart(self, df: pd.DataFrame) -> str:
        """
        Generate combined table and chart macro for Confluence.
        
        Args:
            df (pd.DataFrame): Processed dataframe
            
        Returns:
            str: Confluence markup with table and chart
        """
        # Generate table rows
        table_rows = ["<tr><th>DATE</th><th>TOTAL_JOBS</th><th>Base Line</th></tr>"]
        
        for _, row in df.iterrows():
            table_rows.append(
                f"<tr><td>{row['DATE'].strftime('%Y-%m-%d')}</td>"
                f"<td>{row['TOTAL_JOBS']:,}</td>"
                f"<td>{row['Base Line']:,}</td></tr>"
            )
        
        # Combine table and chart in the correct structure
        return f"""
        <ac:structured-macro ac:name="table-chart">
            <ac:parameter ac:name="type">column</ac:parameter>
            <ac:parameter ac:name="is3d">true</ac:parameter>
            <ac:parameter ac:name="title">4th Peak of the Month</ac:parameter>
            <ac:parameter ac:name="legend">true</ac:parameter>
            <ac:parameter ac:name="dataorientation">horizontal</ac:parameter>
            <ac:rich-text-body>
                <table>
                    {' '.join(table_rows)}
                </table>
            </ac:rich-text-body>
        </ac:structured-macro>
        """

    def run(self) -> None:
        """
        Execute the main workflow.
        """
        try:
            # Load and process data
            df_top4 = self.load_and_process_data()
            
            # Generate content with combined table and chart
            table_and_chart = self.generate_table_and_chart(df_top4)
            
            content = f"""
            <h1>Overall Monthly Task Usage Report</h1>
            <p>Last updated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} UTC</p>
            <p>Generated by: {self.config.get('USERNAME', 'Unknown')}</p>
            
            <h2>Task Usage Analysis</h2>
            {table_and_chart}
            
            <hr/>
            <p><em>Note: This report shows the top 4 dates with highest total jobs compared to baseline.</em></p>
            """
            
            # Get page info and update/create
            page_id, version = self.get_page_info()
            self.create_or_update_page(content, page_id, version)
            logger.info("Successfully generated and uploaded report")

        except Exception as e:
            logger.error(f"Error in main workflow: {str(e)}")
            raise
