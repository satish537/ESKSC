import requests
from requests.auth import HTTPBasicAuth
import pandas as pd
import json
import urllib3
import os
from datetime import datetime
import logging
from typing import Tuple, Optional
from pathlib import Path

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('confluence_update.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class ConfluenceReporter:
    def __init__(self, config_path: str = "config.json"):
        """
        Initialize the ConfluenceReporter with configuration.
        """
        self.config = self._load_config(config_path)
        self.session = self._create_session()
        
        # Disable SSL warnings if using self-signed certificates
        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

    def _load_config(self, config_path: str) -> dict:
        """
        Load configuration from JSON file.
        """
        try:
            with open(config_path, 'r') as f:
                config = json.load(f)
                required_keys = ['CONFLUENCE_URL', 'USERNAME', 'API_TOKEN', 
                               'SPACE_KEY', 'PAGE_TITLE', 'CSV_FILE']
                
                if not all(key in config for key in required_keys):
                    raise ValueError(f"Missing required configuration keys. Required: {required_keys}")
                
                return config
        except FileNotFoundError:
            raise FileNotFoundError(f"Configuration file not found at {config_path}")
        except json.JSONDecodeError:
            raise ValueError(f"Invalid JSON in configuration file: {config_path}")

    def _create_session(self) -> requests.Session:
        """
        Create and configure a requests session.
        """
        session = requests.Session()
        session.auth = HTTPBasicAuth(self.config['USERNAME'], self.config['API_TOKEN'])
        session.headers.update({
            "Content-Type": "application/json",
            "X-Atlassian-Token": "no-check"
        })
        session.verify = False  # For self-signed certificates
        return session

    def load_and_process_data(self) -> pd.DataFrame:
        """
        Load and process CSV data maintaining the exact original logic.
        """
        try:
            # Read CSV file
            df = pd.read_csv(self.config['CSV_FILE'])
            
            # Validate required columns
            required_columns = {'DATE', 'TOTAL_JOBS'}
            if not required_columns.issubset(df.columns):
                raise ValueError(f"CSV file missing required columns: {required_columns}")

            # Convert DATE column to datetime format
            df['DATE'] = pd.to_datetime(df['DATE'], errors='coerce')

            # Aggregate total jobs per date
            df_grouped = df.groupby('DATE', as_index=False)['TOTAL_JOBS'].sum()

            # Get top 4 dates with highest total jobs
            df_top4 = df_grouped.nlargest(4, 'TOTAL_JOBS')

            # Baseline value
            baseline = 1899206
            df_top4['Base Line'] = baseline
            
            return df_top4

        except pd.errors.EmptyDataError:
            raise ValueError("CSV file is empty")
        except Exception as e:
            raise Exception(f"Error processing CSV data: {str(e)}")

    def generate_table_and_chart(self, df: pd.DataFrame) -> str:
        """
        Generate combined table and chart macro for Confluence.
        """
        # Generate table rows
        table_rows = ["<tr><th>DATE</th><th>TOTAL_JOBS</th><th>Base Line</th></tr>"]
        
        for _, row in df.iterrows():
            table_rows.append(
                f"<tr><td>{row['DATE'].strftime('%Y-%m-%d')}</td>"
                f"<td>{row['TOTAL_JOBS']:,}</td>"
                f"<td>{row['Base Line']:,}</td></tr>"
            )
        
        # Combine table and chart in the correct structure
        return f"""
        <ac:structured-macro ac:name="table-chart">
            <ac:parameter ac:name="type">column</ac:parameter>
            <ac:parameter ac:name="is3d">true</ac:parameter>
            <ac:parameter ac:name="title">4th Peak of the Month</ac:parameter>
            <ac:parameter ac:name="legend">true</ac:parameter>
            <ac:parameter ac:name="dataorientation">horizontal</ac:parameter>
            <ac:rich-text-body>
                <table class="wrapped">
                    <colgroup>
                        <col/>
                        <col/>
                        <col/>
                    </colgroup>
                    <tbody>
                        {' '.join(table_rows)}
                    </tbody>
                </table>
            </ac:rich-text-body>
        </ac:structured-macro>
        """

    def get_page_info(self) -> Tuple[Optional[str], Optional[int]]:
        """
        Get Confluence page ID and version.
        """
        try:
            params = {
                'title': self.config['PAGE_TITLE'],
                'spaceKey': self.config['SPACE_KEY'],
                'expand': 'version'
            }
            response = self.session.get(
                self.config['CONFLUENCE_URL'],
                params=params
            )
            response.raise_for_status()
            
            data = response.json()
            if data['size'] > 0:
                return data['results'][0]['id'], data['results'][0]['version']['number']
            return None, None

        except requests.exceptions.RequestException as e:
            logger.error(f"Failed to get page info: {str(e)}")
            raise

    def create_or_update_page(self, content: str, page_id: Optional[str] = None, 
                            version: Optional[int] = None) -> None:
        """
        Create or update Confluence page.
        """
        try:
            payload = {
                "type": "page",
                "title": self.config['PAGE_TITLE'],
                "space": {"key": self.config['SPACE_KEY']},
                "body": {
                    "storage": {
                        "value": content,
                        "representation": "storage"
                    }
                }
            }

            if page_id:
                payload["id"] = page_id
                payload["version"] = {"number": version + 1}
                response = self.session.put(
                    f"{self.config['CONFLUENCE_URL']}{page_id}",
                    json=payload
                )
            else:
                response = self.session.post(
                    self.config['CONFLUENCE_URL'],
                    json=payload
                )
            
            response.raise_for_status()
            logger.info(f"âœ… Page '{self.config['PAGE_TITLE']}' {'updated' if page_id else 'created'} successfully.")

        except requests.exceptions.RequestException as e:
            logger.error(f"Failed to {'update' if page_id else 'create'} page: {str(e)}")
            if response := getattr(e, 'response', None):
                logger.error(f"Response: {response.text}")
            raise

    def run(self) -> None:
        """
        Execute the main workflow.
        """
        try:
            # Load and process data
            df_top4 = self.load_and_process_data()
            
            # Generate content with combined table and chart
            table_and_chart = self.generate_table_and_chart(df_top4)
            
            content = f"""
            <h1>Overall Monthly Task Usage Report</h1>
            <p><strong>Last updated:</strong> 2025-03-09 13:45:52 UTC</p>
            <p><strong>Generated by:</strong> satish537</p>
            
            <h2>Task Usage Analysis</h2>
            {table_and_chart}
            
            <hr/>
            <p><em>Note: This report shows the top 4 dates with highest total jobs compared to baseline ({1899206:,}).</em></p>
            """
            
            # Get page info and update/create
            page_id, version = self.get_page_info()
            self.create_or_update_page(content, page_id, version)
            logger.info("Successfully generated and uploaded report")

        except Exception as e:
            logger.error(f"Error in main workflow: {str(e)}")
            raise

def main():
    try:
        reporter = ConfluenceReporter()
        reporter.run()
    except Exception as e:
        logger.error(f"Fatal error: {str(e)}")
        raise

if __name__ == "__main__":
    main()
