import os
import csv
from datetime import datetime
import logging
from typing import Dict, List, Tuple, Optional

class CSVProcessor:
    """Class to handle CSV file processing and data aggregation."""
    
    DATE_FORMATS = [
        '%d-%b-%y',
        '%Y-%m-%d %H:%M:%S',
        '%m/%d/%Y %I:%M %p',
        '%d/%m/%Y %H:%M',
        '%d/%m/%Y %H:%M:%S.%f'
    ]

    def __init__(self, execution_info: dict):
        """
        Initialize the CSVProcessor.
        
        Args:
            execution_info (dict): Contains execution metadata like timestamp and user
        """
        self.execution_timestamp = execution_info['timestamp']
        self.execution_user = execution_info['user']
        self.setup_logging()
        
        self.summary_data: Dict[Tuple, int] = {}
        self.summary_data_region: Dict[Tuple, int] = {}
        
    def setup_logging(self):
        """Configure logging settings."""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            filename=f'csv_processing_{self.execution_timestamp.strftime("%Y%m%d")}.log'
        )
        self.logger = logging.getLogger(__name__)

    @staticmethod
    def get_csv_files(directory: str = '.') -> List[str]:
        """
        Get all CSV files in the specified directory.
        
        Args:
            directory (str): Directory path to search for CSV files
            
        Returns:
            List[str]: List of CSV filenames
        """
        return [file for file in os.listdir(directory) if file.endswith('.csv')]

    @staticmethod
    def parse_filename(filename: str) -> Tuple[Optional[str], Optional[str]]:
        """
        Extract region and environment from filename.
        
        Args:
            filename (str): Name of the file to parse
            
        Returns:
            Tuple[Optional[str], Optional[str]]: Region and environment, or None if parsing fails
        """
        parts = filename.split('-')
        if len(parts) in [2, 3]:
            return parts[0], parts[1]
        return None, None

    def parse_date(self, net_date: str) -> Optional[datetime]:
        """
        Parse date string using multiple formats.
        
        Args:
            net_date (str): Date string to parse
            
        Returns:
            Optional[datetime]: Parsed datetime object or None if parsing fails
        """
        for fmt in self.DATE_FORMATS:
            try:
                return datetime.strptime(net_date, fmt)
            except ValueError:
                continue
        return None

    def process_line(self, line: List[str], region: str, env: str) -> None:
        """
        Process a single line of CSV data.
        
        Args:
            line (List[str]): CSV line data
            region (str): Region identifier
            env (str): Environment identifier
        """
        if not line:
            return

        date_obj = self.parse_date(line[0])
        if date_obj is None:
            self.logger.warning(f"Could not parse date: {line[0]}")
            return

        try:
            date = date_obj.strftime('%Y-%m-%d')
            ctm_host_name = line[1].strip()
            jobs = int(line[2])

            # Update summary dictionaries
            key = (region, env, date, ctm_host_name)
            key_region = (region, env, date)

            self.summary_data[key] = self.summary_data.get(key, 0) + jobs
            self.summary_data_region[key_region] = self.summary_data_region.get(key_region, 0) + jobs

        except (IndexError, ValueError) as e:
            self.logger.error(f"Error processing line: {line}. Error: {str(e)}")

    def process_csv_file(self, file: str) -> None:
        """
        Process a single CSV file.
        
        Args:
            file (str): CSV filename to process
        """
        self.logger.info(f"Processing file: {file}")
        
        try:
            with open(file, 'r', encoding='utf-8') as csv_file:
                reader = csv.reader(csv_file)
                lines = list(reader)

            if not lines:
                self.logger.warning(f"Empty file: {file}")
                return

            # Remove header if present
            if lines[0][0] == 'NET_DATE':
                lines.pop(0)

            filename = os.path.splitext(file)[0]
            region, env = self.parse_filename(filename)
            
            if not (region and env):
                self.logger.warning(f"Invalid filename format: {file}")
                return

            for line in lines:
                self.process_line(line, region, env)

        except Exception as e:
            self.logger.error(f"Error processing file {file}: {str(e)}")

    def write_summary_to_csv(self, filename: str, headers: List[str], data: Dict[Tuple, int]) -> None:
        """
        Write summarized data to CSV file.
        
        Args:
            filename (str): Output filename
            headers (List[str]): CSV headers
            data (Dict[Tuple, int]): Data to write
        """
        try:
            with open(filename, 'w', newline='') as csv_file:
                writer = csv.writer(csv_file)
                writer.writerow(headers + ['EXECUTION_TIMESTAMP', 'EXECUTED_BY'])
                
                for key, total_jobs in data.items():
                    writer.writerow(list(key) + [total_jobs, 
                                               self.execution_timestamp.strftime('%Y-%m-%d %H:%M:%S'),
                                               self.execution_user])
                                               
            self.logger.info(f"Successfully wrote summary to {filename}")
            
        except Exception as e:
            self.logger.error(f"Error writing to {filename}: {str(e)}")

    def process_all_files(self) -> None:
        """Process all CSV files and generate summary reports."""
        csv_files = self.get_csv_files()
        
        if not csv_files:
            self.logger.warning("No CSV files found in the current directory")
            return

        for file in csv_files:
            self.process_csv_file(file)

        # Write summary reports
        self.write_summary_to_csv(
            "task_usage_report.csv",
            ["REGION", "ENV", "DATE", "CTM_HOST_NAME", "TOTAL_JOBS"],
            self.summary_data
        )
        
        self.write_summary_to_csv(
            "task_usage_report_by_region.csv",
            ["REGION", "ENV", "DATE", "TOTAL_JOBS"],
            self.summary_data_region
        )

def main():
    """Main entry point of the script."""
    execution_info = {
        'timestamp': datetime.strptime('2025-03-11 06:14:11', '%Y-%m-%d %H:%M:%S'),
        'user': 'satish537'
    }
    
    processor = CSVProcessor(execution_info)
    processor.process_all_files()

if __name__ == "__main__":
    main()
